import BaseDeviceOperate from "../baseDeviceOperate";
import logger from "../../../log";
import _ from "lodash";
import deviceDataUtil from "../../../utils/deviceDataUtil";
import IIHostStateFormatWhenSyncParams from "../../../ts/interface/IIHostStateFormatWhenSyncParams";
import { v4 as uuidv4 } from 'uuid';
import { syncDeviceStateToIHost } from "../../../api/iHost";
import { deleteDevice } from "../../../api/iHost";
import db from "../../../utils/db";
import EUiid from "../../../ts/enum/EUiid";
import { IHostStateInterface } from "../../../ts/interface/IHostState";
import EDeviceControlMode from "../../../ts/enum/EDeviceControlMode";
import { Request } from "express";
import updateLanDeviceData from "../../public/updateLanDeviceData";
import controlDeviceByLan from "../common/controlDeviceByLan";
import { IReqData } from "../../../ts/interface/IReqData";
import { getUiidOperateInstance } from "../../../utils/deviceOperateInstanceMange";
import type Uiid168 from "../uiid168";

/** 
 * zigbee 设备公共类 (single channel socket)
 * zigbee 设备被 smarthome addon 生成是通过 zigbee-p/-u 网关添加 (The zigbee device is generated by smarthome addon and is added through the zigbee-p/-u gateway)
 * zigbee-p 是通过局域网来同步设备状态 (zigbee-p is to synchronize device status through a local area network)
 * zigbee-u 通过长连接来同步设备状态 (zigbee-u Synchronizes device status through long connection)
 * zigbee 子设备同步到 iHost 会有一些特殊逻辑 (There will be some special logic when syncing the zigbee sub-device to iHost)
 */
export default class ZigbeeDeviceOperate extends BaseDeviceOperate {
    constructor(deviceId: string) {
        super(deviceId);
    }

    protected _controlMode = EDeviceControlMode.ZIGBEE;

    private get _isZigbeeUSubDevice() {
        return deviceDataUtil.isZigbeeUSubDevice(this._deviceId);
    }

    // 提取获取 zigbee-p 设备相关信息的公共逻辑
    private async _fetchZigbeePInfo() {
        const zigbeePDeviceId = this._eWeLinkDeviceData!.itemData.params.parentid;
        const zigbeePEWelinkDeviceData = deviceDataUtil.getEWeLinkDeviceDataByDeviceId(zigbeePDeviceId);
        logger.info('zigbeePEWelinkDeviceData', zigbeePEWelinkDeviceData)
        if (!zigbeePEWelinkDeviceData) {
            throw new Error('zigbee 设备生成同步数据出现了问题');
        }
        return {
            zigbeePDeviceId,
            zigbeePEWelinkDeviceData
        };
    }

    // 提取获取所有 zigbee-p 子设备列表并查找当前设备状态的逻辑
    private async _findDeviceState(zigbeePDeviceId: string) {
        const operateInstance = getUiidOperateInstance(zigbeePDeviceId) as Uiid168;
        const allZigbeeDevices = await operateInstance?.getZigbeePAllDeviceList();
        return allZigbeeDevices && allZigbeeDevices.find((item) => item.deviceid === this._deviceId);
    }

    protected async _getDeviceInfoWhenGenerateTags() {
        const { uiid } = this._eWeLinkDeviceData!.itemData.extra;
        const { devicekey, apikey } = this._eWeLinkDeviceData!.itemData;

        const deviceInfo = {
            deviceId: this._deviceId,
            devicekey,
            selfApikey: apikey,
            uiid,
            account: this._eWeLinkApiInfo!.userInfo.account,
            service_address: this._service_address,
        };

        if (this._isZigbeeUSubDevice) return deviceInfo;

        const { zigbeePEWelinkDeviceData, zigbeePDeviceId } = await this._fetchZigbeePInfo();
        deviceInfo.devicekey = zigbeePEWelinkDeviceData.itemData.devicekey;
        deviceInfo.selfApikey = zigbeePEWelinkDeviceData.itemData.apikey;
        _.set(deviceInfo, 'parentId', zigbeePDeviceId);
        return deviceInfo;
    }

    protected override async _generateLanStateWhenSync() {
        let lanState;
        if (this._isZigbeeUSubDevice) {
            lanState = this._eWeLinkDeviceData!.itemData.params;
            return lanState;
        }
        const { zigbeePDeviceId } = await this._fetchZigbeePInfo();
        const deviceState = await this._findDeviceState(zigbeePDeviceId);
        if (deviceState) {
            lanState = deviceState.params;
        }
        return lanState;
    }

    protected override async _generateIHostStateWhenSync(lanState: any) {
        const iHostState: any = {}
        if (this._isZigbeeUSubDevice) {
            _.assign(iHostState, this._lanStateToIHostState(lanState));
            return iHostState;
        }
        const { zigbeePDeviceId } = await this._fetchZigbeePInfo();
        const deviceState = await this._findDeviceState(zigbeePDeviceId);
        if (deviceState) {
            _.assign(iHostState, this._lanStateToIHostState(lanState));
        }
        return iHostState;
    }

    /** 控制 lan 设备 */
    protected async _updateLanDeviceStates(req: Request, iHostState: IHostStateInterface) {
        const lanState = this._iHostStateToLanState(iHostState);
        const lanRequest = updateLanDeviceData.subDeviceControl;
        return await controlDeviceByLan.request(req, lanRequest, lanState)
    }

    /** 控制设备:如果是 zigbee-u 子设备，走父类定义好的长连接逻辑 */
    async updateDeviceStates(req: Request) {
        const reqData = req.body as IReqData;
        const { payload } = reqData.directive;
        const iHostState = payload.state;

        if (this._isZigbeeUSubDevice) {
            return await this._updateWanDeviceStates(req, iHostState)
        }
        return await this._updateLanDeviceStatesCollect(req, iHostState)
    }

    /** zigbee-u 长连接设备上报*/
    protected async _sendDataWhenSyncDeviceStateToIHostByWebsocket(data: { lanState: any, isVerifyReportCapability?: boolean }) {
        if (this._isZigbeeUSubDevice && this._eWeLinkDeviceData && this._eWeLinkDeviceData.itemData.online === false) return;
        await super._sendDataWhenSyncDeviceStateToIHostByWebsocket(data);
    }

    /** zigbee-p 局域网设备上报 */
    async syncDeviceStateToIHostByZigbeeP(params: any) {
        try {
            if (!this._iHostDeviceData) {
                return;
            }

            const state = this._lanStateToIHostState(params);
            const syncDeviceStateToIHostParams = {
                event: {
                    header: {
                        name: 'DeviceStatesChangeReport',
                        message_id: uuidv4(),
                        version: '2',
                    },
                    endpoint: {
                        serial_number: this._iHostDeviceData.serial_number,
                        third_serial_number: this._deviceId,
                    },
                    payload: {
                        state,
                    },
                },
            };

            const res = await syncDeviceStateToIHost(syncDeviceStateToIHostParams);

            if (res && res.header && res.header.name !== 'Response') {
                logger.info('sync zigbee device state to iHost error---', res);
            }
        } catch (error: any) {
            logger.error('sync zigbee device state to iHost code error----', error);
            return null;
        }
    }

    // zigbee-u/p 子设备上下线相关在基类中处理过了

    // 当zigbee-p 子设备被删除时，需要取消同步并删除本地存储的云端数据
    async cancelSyncZigbeeDeviceToIHostBySse() {
        //已同步的子设备，取消同步
        if (this._iHostDeviceData) {
            logger.info('cancel to sync zigbee device----------------------deviceId', this._deviceId, this._iHostDeviceData.serial_number);
            await deleteDevice(this._iHostDeviceData.serial_number);
        }
        //删除本地云端数据中设备
        const eWeLinkDeviceList = db.getDbValue('eWeLinkDeviceList');
        logger.info('delete zigbee-p subDevice-----', this._deviceId);
        _.remove(eWeLinkDeviceList, (item) => item.itemData.deviceid === this._deviceId);

        const list = eWeLinkDeviceList.map((eWeLinkDeviceData) => {
            const { uiid } = eWeLinkDeviceData.itemData.extra;
            if (uiid === EUiid.uiid_168) {
                _.remove(eWeLinkDeviceData.itemData.params.subDevices, (item: { deviceid: string }) => item.deviceid === this._deviceId);
            }
            return eWeLinkDeviceData;
        });
        db.setDbValue('eWeLinkDeviceList', list);
    }

    override async syncDeviceStateToIHostByWebsocket(data: { lanState: any, isVerifyReportCapability?: boolean }) {
        if (!this._isZigbeeUSubDevice) return;
        await super.syncDeviceStateToIHostByWebsocket(data);
    }

    override async syncWebsocketDeviceOffline() {
        if (!this._isZigbeeUSubDevice) return;
        await this.syncDeviceOnlineToIHost(false);
    }
}